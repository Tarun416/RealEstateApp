apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.example.tarun.talismanpi"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        def versionMajor = 1
        def versionMinor = 2
        def versionPatch = 1
        def versionBuild = 1
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            shrinkResources false
            proguardFile 'proguard-rules.pro'
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            lintOptions {
                abortOnError false
                ignoreWarnings true
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFile 'proguard-rules.pro'
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            lintOptions {
                abortOnError false
                ignoreWarnings true
            }
        }

        applicationVariants.all { variant ->
            if (variant.flavorName == 'qa') {
                variant.buildConfigField "String", "SERVER_URL", "\"" + getServerUrl() + "\""
            } else {
                variant.buildConfigField "String", "SERVER_URL", "\"" + getProdServerUrl() + "\""
            }

        }

    }

    flavorDimensions "default"
    productFlavors {
        staging {
            dimension "default"
            resValue "string", "app_name", "TalismanPi Staging"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }
        prod {
            dimension "default"
            resValue "string", "app_name", "TalismanPi"
            versionName "1.0"
        }
    }

    compileOptions {
        targetCompatibility rootProject.ext.targetJVM
        sourceCompatibility rootProject.ext.targetJVM
    }
    sourceSets {
        main { java.srcDirs = ['src/main/java', 'src/test/java/'] }
        /*// used by Room, to test migrations
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())

        // used by the room flavors to avoid duplication
        room.java.srcDirs += "src/room_common/java"
        room2.java.srcDirs += "src/room_common/java"
        room3.java.srcDirs += "src/room_common/java"

        androidTest.java.srcDirs += "src/androidTestRoom_Common/java"*/
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }


    buildToolsVersion '26.0.2'
}


static def getServerUrl() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['SERVER_URL']
}

static def getProdServerUrl() {
    Properties props = new Properties()
    props.load(new FileInputStream(new File('secrets.properties')))
    return props['PROD_SERVER_URL']
}

kapt {
    generateStubs = true
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation("com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion") {
        exclude group: 'com.android.support', module: 'annotations-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
    }
    implementation "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    implementation("com.android.support:design:$rootProject.ext.supportLibraryVersion") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'annotations-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
    }
    implementation("com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'annotations-v7'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
    }

    /*
    Kotlin
     */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation("com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0")
    implementation("com.squareup.retrofit2:retrofit:$rootProject.ext.retrofit")
    implementation("com.github.simonpercic:oklog3:$rootProject.ext.okLog")
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation("io.reactivex.rxjava2:rxjava:2.0.5")

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation("com.jakewharton.timber:timber:$rootProject.ext.timber")
    provided("org.glassfish:javax.annotation:$rootProject.ext.javaxAnnotation")

    //dagger
    implementation("com.google.dagger:dagger:$rootProject.ext.dagger")
    kapt("com.google.dagger:dagger-compiler:$rootProject.ext.dagger")

    //chuck
    debugImplementation("com.readystatesoftware.chuck:library:$rootProject.ext.chuckDebug")
    releaseImplementation("com.readystatesoftware.chuck:library-no-op:$rootProject.ext.chuckRelease")

    //glide
    implementation("com.github.bumptech.glide:glide:$rootProject.ext.glide")
    implementation("com.google.firebase:firebase-messaging:$rootProject.ext.firebase")
    implementation("com.squareup.retrofit2:converter-gson:$rootProject.ext.gsonConverter")
    implementation project(':kotlin')

    //Tools
    implementation("com.jakewharton.rxbinding:rxbinding-support-v4:$rootProject.ext.rxBinding") {
        exclude group: 'com.android.support', module: 'support-v4'
    }

    implementation("com.jakewharton.rxbinding:rxbinding:$rootProject.ext.rxBinding")

    //room libraries
    implementation("android.arch.persistence.room:runtime:$roomVersion")
    kapt("android.arch.persistence.room:compiler:$roomVersion")
//    androidTestImplementation ("android.arch.persistence.room:testing:$roomVersion")
    implementation("android.arch.persistence.room:rxjava2:$roomVersion")

    implementation("com.mindorks:placeholderview:0.2.7")

    implementation("de.hdodenhof:circleimageview:$rootProject.ext.circleImageView")


}
//apply plugin: 'com.google.gms.google-services'
